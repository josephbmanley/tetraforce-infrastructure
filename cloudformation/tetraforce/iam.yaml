AWSTemplateFormatVersion: '2010-09-09'
Description: TetraForce ECS Infrastructure
Parameters:
  #------------------------
  # Deployment Information
  #------------------------
  environment:
    Type: String
    Description: Name of the environment to use in naming.
    Default: production
  
  DockerRepoSecret:
    Description: Arn of secret in AWS Secrets Manager holding Docker repo credentials
    Type: String

  ServerlistTable:
    Description: Name of the serverlist dynamodb table
    Type: String

Resources:
  EcsExecutionerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: !Sub 'TetraForce-TaskExecutioner-${environment}'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
  EcsExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowGettingSecrets
      Roles:
        - !Ref EcsExecutionerRole
      PolicyDocument:
        Statement:
          - Sid: ReadDockerSecret
            Action:
              - secretsmanager:Describe*
              - secretsmanager:Get*
              - secretsmanager:List*
            Effect: Allow
            Resource: !Ref DockerRepoSecret

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Effect: Allow
            Sid: AssumeRoleStatement
  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowLogsAndEcs
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Statement:
          - Sid: AllowLambdaLogging
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:GetLogEvents
            Effect: Allow
            Resource: "*"
          - Sid: AllowEcsEc2Read
            Action:
              - ecs:List*
              - ecs:Describe*
              - ecs:Get*
              - ec2:Describe*
              - ec2:Get*
              - ec2:List*
            Effect: Allow
            Resource: "*"
          - Sid: AllowEcsRunTask
            Action:
              - ecs:RunTask
            Effect: Allow
            Resource: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/TetraForce-*"
          - Sid: AllowEcsStopTask
            Action:
              - ecs:StopTask
            Effect: Allow
            Resource: "*"
          - Sid: PassRoleToEcs
            Action:
              - iam:PassRole
              - iam:Get*
              - iam:List*
              - iam:Describe*
            Effect: Allow
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/TetraForce*"
          - Sid: ServerlistDynamodbAcces
            Action:
              - dynamodb:Get*
              - dynamodb:Describe*
              - dynamodb:List*
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGet*
              - dynamodb:BatchWrite*
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServerlistTable}"


Outputs:
  EcsExecutioner:
    Description: IAM Role used by ECS Tasks
    Value: !GetAtt EcsExecutionerRole.Arn
  LambdaRole:
    Description: IAM Role used by Lambda functions
    Value: !GetAtt LambdaRole.Arn