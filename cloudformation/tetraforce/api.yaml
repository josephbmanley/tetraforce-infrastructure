AWSTemplateFormatVersion: '2010-09-09'
Description: TetraForce API
Parameters:
  environment:
    Type: String
    Description: Name of the environment to use in naming.
    Default: production
  ApiId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/tetraforce/api/id'
  DeploymentBucket:
    Description: S3 Bucket used in CloudFormation deployment.
    Type: String
  release:
    Type: String
    Description: Name of the release name of the stack version to use.
    Default: production
  LambdaRole:
    Type: String
    Description: Arn of Lambda role assumed by fucntion.
  EcsCluster:
    Type: String
    Description: Name of ECS cluster connected to lambda functions
  TaskDefinition:
    Type: String
    Description: Name of the task definition to use with lambda functions

Resources:
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiId
      StageName: !Ref environment


  # =========
  # GET TASKS
  # =========
  GetTasksLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${release}/lambda/get_tasks.zip"
      Role: !Ref LambdaRole
      FunctionName: !Sub "TetraForce-Api-GetTasks-${environment}"
      Description: Lambda that returns ECS task information
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          CLUSTER: !Ref EcsCluster
  # Grant permission to API Gateway
  GetTasksLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/*/*"
      FunctionName: !GetAtt GetTasksLambda.Arn
  # Create API Integration
  GetTasksIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref ApiId
      Description: !Sub "Integration for Get Tasks Lambda ${environment} for environment"
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt GetTasksLambda.Arn
  # Create Api Route
  GetTasksRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref ApiId
      RouteKey: "GET /get_tasks"
      Target: !Sub "integrations/${GetTasksIntegration}"

  # ============
  # CREATE TASKS
  # ============
  CreateTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${release}/lambda/create_task.zip"
      Role: !Ref LambdaRole
      FunctionName: !Sub "TetraForce-Api-CreateTask-${environment}"
      Description: Lambda that returns newly created ecs task
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          CLUSTER: !Ref EcsCluster
          TASK_DEFINITION: !Ref TaskDefinition
  # Grant permission to API Gateway
  CreateTaskLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/*/*"
      FunctionName: !GetAtt CreateTaskLambda.Arn
  # Create API Integration
  CreateTaskIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref ApiId
      Description: !Sub "Integration for Create Task Lambda ${environment} for environment"
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt CreateTaskLambda.Arn
  # Create Api Route
  CreateTaskRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref ApiId
      RouteKey: "GET /create_task"
      Target: !Sub "integrations/${CreateTaskIntegration}"


  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties: 
      ApiId: !Ref ApiId
      Description: Deployment created by CloudFormation
      StageName: !Ref environment