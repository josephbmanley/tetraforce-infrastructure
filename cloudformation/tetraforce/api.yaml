AWSTemplateFormatVersion: '2010-09-09'
Description: TetraForce API
Parameters:
  environment:
    Type: String
    Description: Name of the environment to use in naming.
    Default: production
  DeploymentBucket:
    Description: S3 Bucket used in CloudFormation deployment.
    Type: String
  release:
    Type: String
    Description: Name of the release name of the stack version to use.
    Default: production
  LambdaRole:
    Type: String
    Description: Arn of Lambda role assumed by fucntion.
  EcsCluster:
    Type: String
    Description: Name of ECS cluster connected to lambda functions
  TaskDefinition:
    Type: String
    Description: Name of the task definition to use with lambda functions
  ServerlistTable:
    Description: Name of the serverlist dynamodb table
    Type: String
  VpcId:
    Description: ID of the VPC to deploy server tasks into
    Type: String
  TaskSecurityGroupId:
    Description: ID of the security group for running tasks
    Type: String

Resources:

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Description: Backend API for managing TetraForce game servers/tasks
      Name: !Sub "TetraForce-API-${environment}"
      ProtocolType: HTTP


  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: 'true'
      StageName: "$default"


  # =========
  # GET TASKS
  # =========
  GetTasksLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${release}/lambda/get_servers.zip"
      Role: !Ref LambdaRole
      FunctionName: !Sub "TetraForce-Api-GetServers-${environment}"
      Description: Lambda that returns ECS task information
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          CLUSTER: !Ref EcsCluster
          SERVERLIST_TABLE: !Ref ServerlistTable
  # Grant permission to API Gateway
  GetTasksLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/*"
      FunctionName: !GetAtt GetTasksLambda.Arn
  # Create API Integration
  GetTasksIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref HttpApi
      Description: !Sub "Integration for Get Tasks Lambda ${environment} for environment"
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt GetTasksLambda.Arn
  # Create Api Route
  GetTasksRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref HttpApi
      RouteKey: "GET /get_servers"
      Target: !Sub "integrations/${GetTasksIntegration}"

  # ============
  # CREATE TASKS
  # ============
  CreateTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${release}/lambda/create_server.zip"
      Role: !Ref LambdaRole
      FunctionName: !Sub "TetraForce-Api-CreateServer-${environment}"
      Description: Lambda that returns newly created ecs task
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          CLUSTER: !Ref EcsCluster
          TASK_DEFINITION: !Ref TaskDefinition
          SERVERLIST_TABLE: !Ref ServerlistTable
          VPC_ID: !Ref VpcId
          TASK_SECURITY_GROUP: !Ref TaskSecurityGroupId
  # Grant permission to API Gateway
  CreateTaskLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/*"
      FunctionName: !GetAtt CreateTaskLambda.Arn
  # Create API Integration
  CreateTaskIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref HttpApi
      Description: !Sub "Integration for Create Task Lambda ${environment} for environment"
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt CreateTaskLambda.Arn
  # Create Api Route
  CreateTaskRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref HttpApi
      RouteKey: "POST /create_server"
      Target: !Sub "integrations/${CreateTaskIntegration}"

  # ==========
  # STOP TASKS
  # ==========
  StopTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${release}/lambda/stop_server.zip"
      Role: !Ref LambdaRole
      FunctionName: !Sub "TetraForce-Api-StopServer-${environment}"
      Description: Lambda that stops an ecs task
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          CLUSTER: !Ref EcsCluster
          SERVERLIST_TABLE: !Ref ServerlistTable
  # Grant permission to API Gateway
  StopTaskLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/*"
      FunctionName: !GetAtt StopTaskLambda.Arn
  # Create API Integration
  StopTaskIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref HttpApi
      Description: !Sub "Integration for Stop Task Lambda ${environment} for environment"
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt StopTaskLambda.Arn
  # Create Api Route
  StopTaskRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref HttpApi
      RouteKey: "POST /stop_server"
      Target: !Sub "integrations/${StopTaskIntegration}"

  # =============
  # ON TASK STOP
  # =============
  OnTaskStopLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${release}/lambda/on_server_stop.zip"
      Role: !Ref LambdaRole
      FunctionName: !Sub "TetraForce-Api-OnTaskStop-${environment}"
      Description: Lambda that cleans task from DynamoDB table
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          CLUSTER: !Ref EcsCluster
          SERVERLIST_TABLE: !Ref ServerlistTable
  OnTaskStopRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Calls lambda anytime a task is stopped in TetraForce-${environment}"
      EventPattern: { "source": ["aws.ecs"], "detail-type": [ "ECS Task State Change" ] }
      Name: !Sub "TetraForce-OnTaskStop-${environment}"
      RoleArn: !Ref LambdaRole
      Targets:
        - Arn: !GetAtt OnTaskStopLambda.Arn
          Id: "OnTaskStopLambda"